#!/usr/bin/env python3
"""
Script para testar manualmente o EmailService
Execute: python test_email_manual.py
"""

import sys
import os
from datetime import datetime

# Adicionar path para imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from services.email_service import EmailService


def linha_separadora(titulo=""):
    """Imprime linha separadora"""
    print("=" * 70)
    if titulo:
        print(f" {titulo}")
        print("=" * 70)


def testar_deteccao_modo():
    """Testa detec√ß√£o autom√°tica de modo"""
    linha_separadora("TESTE 1: DETEC√á√ÉO AUTOM√ÅTICA DE MODO")
    
    service = EmailService()
    print(f"Modo detectado: {service.modo}")
    
    config = service.testar_configuracao()
    print(f"Configura√ß√£o OK: {config['configuracao_ok']}")
    
    print("\nDetalhes da configura√ß√£o:")
    for detalhe in config['detalhes']:
        print(f"  {detalhe}")
    
    return service


def testar_envio_desenvolvimento():
    """Testa envio em modo desenvolvimento"""
    linha_separadora("TESTE 2: MODO DESENVOLVIMENTO")
    
    service = EmailService(modo='development')
    
    resultado = service.enviar(
        destinatario="vencedor@leilao.com",
        assunto="üéâ Parab√©ns! Voc√™ venceu o leil√£o!",
        mensagem="""Ol√° Jo√£o Silva,

Parab√©ns! Voc√™ venceu o leil√£o do item 'iPhone 15 Pro' com o lance de R$2.700,00.

Detalhes do leil√£o:
- Item: iPhone 15 Pro
- Lance vencedor: R$2.700,00
- Data: {data}

Para finalizar a compra, entre em contato conosco em at√© 48 horas.

Atenciosamente,
Sistema de Leil√µes""".format(data=datetime.now().strftime("%d/%m/%Y √†s %H:%M"))
    )
    
    print(f"\nResultado: {resultado['sucesso']}")
    print(f"Modo: {resultado['modo']}")
    
    return service


def testar_envio_teste():
    """Testa envio em modo teste"""
    linha_separadora("TESTE 3: MODO TESTE")
    
    service = EmailService(modo='test')
    
    print("Enviando email de sucesso...")
    resultado1 = service.enviar(
        "vencedor@teste.com",
        "Parab√©ns! Voc√™ venceu!",
        "Esta √© uma mensagem de teste que deve ter sucesso."
    )
    
    print(f"Resultado 1: {resultado1['sucesso']} - {resultado1.get('erro', 'OK')}")
    
    print("\nEnviando email que deve falhar...")
    resultado2 = service.enviar(
        "fail@teste.com",
        "Este email deve falhar",
        "Esta mensagem deve gerar uma falha simulada."
    )
    
    print(f"Resultado 2: {resultado2['sucesso']} - {resultado2.get('erro', 'OK')}")
    
    return service


def testar_estatisticas(services):
    """Testa estat√≠sticas de m√∫ltiplos servi√ßos"""
    linha_separadora("TESTE 4: ESTAT√çSTICAS")
    
    for i, service in enumerate(services, 1):
        stats = service.obter_estatisticas()
        print(f"\nServi√ßo {i} ({service.modo}):")
        print(f"  Emails enviados: {stats['emails_enviados']}")
        print(f"  Emails falharam: {stats['emails_falharam']}")
        print(f"  Total tentativas: {stats['total_tentativas']}")
        print(f"  Taxa de sucesso: {stats['taxa_sucesso']}%")
        print(f"  Configura√ß√£o v√°lida: {stats['configuracao_valida']}")


def testar_integracao_leilao():
    """Testa integra√ß√£o com sistema de leil√£o"""
    linha_separadora("TESTE 5: INTEGRA√á√ÉO COM LEIL√ÉO")
    
    try:
        from models.leilao import Leilao, EstadoLeilao
        from models.participante import Participante
        from models.lance import Lance
        from datetime import timedelta
        
        print("Criando cen√°rio de leil√£o...")
        
        # Criar participante
        participante = Participante(
            "123.456.789-00", "Maria Vitoriosa",
            "maria@vencedora.com", datetime(1985, 3, 15)
        )
        
        # Criar leil√£o
        agora = datetime.now()
        leilao = Leilao(
            "MacBook Pro M3 - Teste",
            3000.0,
            agora - timedelta(minutes=1),
            agora + timedelta(minutes=1)
        )
        
        # Simular leil√£o
        print("Abrindo leil√£o...")
        leilao.abrir(agora)
        
        print("Adicionando lance...")
        lance = Lance(3500.0, participante, leilao, agora)
        leilao.adicionar_lance(lance)
        
        print("Finalizando leil√£o (vai tentar enviar email)...")
        leilao.finalizar(agora + timedelta(minutes=2))
        
        print(f"Estado final: {leilao.estado}")
        print(f"Vencedor: {leilao.identificar_vencedor().participante.nome}")
        print(f"Lance vencedor: R${leilao.identificar_vencedor().valor:.2f}")
        
    except ImportError as e:
        print(f"‚ùå N√£o foi poss√≠vel importar m√≥dulos do leil√£o: {e}")
    except Exception as e:
        print(f"‚ùå Erro durante teste de integra√ß√£o: {e}")


def menu_interativo():
    """Menu interativo para testes"""
    linha_separadora("MENU INTERATIVO DE TESTES")
    
    while True:
        print("\nEscolha uma op√ß√£o:")
        print("1. Testar detec√ß√£o autom√°tica de modo")
        print("2. Testar modo desenvolvimento")
        print("3. Testar modo teste")
        print("4. Testar todos os modos")
        print("5. Testar integra√ß√£o com leil√£o")
        print("6. Configurar credenciais de produ√ß√£o")
        print("0. Sair")
        
        opcao = input("\nOp√ß√£o: ").strip()
        
        if opcao == "0":
            print("üëã Saindo...")
            break
        elif opcao == "1":
            testar_deteccao_modo()
        elif opcao == "2":
            testar_envio_desenvolvimento()
        elif opcao == "3":
            testar_envio_teste()
        elif opcao == "4":
            services = []
            services.append(testar_deteccao_modo())
            services.append(testar_envio_desenvolvimento())
            services.append(testar_envio_teste())
            testar_estatisticas(services)
        elif opcao == "5":
            testar_integracao_leilao()
        elif opcao == "6":
            configurar_producao()
        else:
            print("‚ùå Op√ß√£o inv√°lida!")


def configurar_producao():
    """Ajuda a configurar modo produ√ß√£o"""
    linha_separadora("CONFIGURA√á√ÉO PARA PRODU√á√ÉO")
    
    print("Para usar o modo produ√ß√£o, voc√™ precisa:")
    print("1. Um email do Gmail")
    print("2. Uma 'Senha de App' (n√£o a senha normal)")
    print("\nPassos para criar senha de app:")
    print("1. Acesse: https://myaccount.google.com/apppasswords")
    print("2. Fa√ßa login na sua conta Google")
    print("3. Clique em 'Gerar' e escolha 'App personalizado'")
    print("4. Digite 'Sistema de Leil√µes' como nome")
    print("5. Copie a senha gerada (16 caracteres)")
    
    print("\nAtualize seu arquivo .env:")
    print("EMAIL_USER=seu.email@gmail.com")
    print("EMAIL_PASSWORD=senha_de_app_de_16_caracteres")
    print("EMAIL_MODE=production")
    
    testar = input("\nDeseja testar a configura√ß√£o atual? (s/N): ").strip().lower()
    if testar in ['s', 'sim', 'y', 'yes']:
        try:
            service = EmailService(modo='production')
            config = service.testar_configuracao()
            
            print("\nResultado do teste:")
            for detalhe in config['detalhes']:
                print(f"  {detalhe}")
                
            if config['configuracao_ok']:
                print("\n‚úÖ Configura√ß√£o v√°lida para produ√ß√£o!")
                
                enviar_teste = input("Deseja enviar um email de teste? (s/N): ").strip().lower()
                if enviar_teste in ['s', 'sim', 'y', 'yes']:
                    email_destino = input("Digite o email de destino: ").strip()
                    if email_destino:
                        resultado = service.enviar(
                            email_destino,
                            "üß™ Teste do Sistema de Leil√µes",
                            f"Este √© um email de teste enviado em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}.\n\nSe voc√™ recebeu este email, a configura√ß√£o est√° funcionando perfeitamente!"
                        )
                        
                        if resultado['sucesso']:
                            print("‚úÖ Email de teste enviado com sucesso!")
                        else:
                            print(f"‚ùå Falha no envio: {resultado.get('erro', 'Erro desconhecido')}")
            else:
                print("\n‚ùå Configura√ß√£o inv√°lida para produ√ß√£o")
                
        except Exception as e:
            print(f"\n‚ùå Erro ao testar produ√ß√£o: {e}")


def main():
    """Fun√ß√£o principal"""
    print("üß™ TESTE MANUAL DO EMAIL SERVICE")
    print("Sistema de Leil√µes - Teste de Integra√ß√£o de Email")
    
    # Verificar se est√° em ambiente de desenvolvimento
    if len(sys.argv) > 1 and sys.argv[1] == "--auto":
        # Modo autom√°tico - roda todos os testes
        services = []
        services.append(testar_deteccao_modo())
        services.append(testar_envio_desenvolvimento())
        services.append(testar_envio_teste())
        testar_estatisticas(services)
        testar_integracao_leilao()
    else:
        # Modo interativo
        menu_interativo()


if __name__ == "__main__":
    main()